{"ast":null,"code":"import { createSelector } from \"reselect\";\nimport _ from \"underscore\";\nimport { getSelectedLanguages } from \"./language\";\n\nconst selectData = state => state.chart.data;\n/**\n * Group total websites views by language.\n *\n * @param data Array<{\n *  tags: Array<{name: string}>;\n *  url: string;\n *  website_views: Array<{ date: string, count: string}>\n * }>\n * @param languages Array<{name: string, displayed: bool}>\n *\n * Return: { language: string, views: number }\n *\n *           if (website.tags.name === \"english\") {\n */\n\n\nexport const groupByLanguage = createSelector([selectData, getSelectedLanguages], (data, languages) => {\n  return Object.entries(data // Returns language data aggregated in format [{English: 100},...]\n  .reduce(function (viewsByLanguages, website) {\n    // TODO refactor so this function uses find and gets it in the right format initially\n    var language = website.tags[0].name; // viewsByLanguages.find(\n    //   (viewsbyLanguage) =>\n    //     viewsbyLanguage.language === language\n    // )\n\n    if (!viewsByLanguages.hasOwnProperty(language)) {\n      viewsByLanguages[language] = 0;\n    }\n\n    var numberOfViewsForThisWebsite = website.website_views.reduce((accumulator, currentValue) => accumulator + parseInt(currentValue.count), 0);\n    viewsByLanguages[language] += numberOfViewsForThisWebsite;\n    return viewsByLanguages;\n  }, {})) // reformats the values of the object to fit the expected return format\n  .map(function (languageData) {\n    var formattedLanguageData = {};\n    return {\n      language: languageData[0],\n      views: languageData[1]\n    };\n  }) // removes non-selected languages from output\n  .filter(languageData => languages.some(language => language.name === languageData.language));\n});\n/**\n * Flattened list of daily views.\n *\n * @param data Array<{\n *  tags: <{name: string}>;\n *  url: string;\n *  website_views: Array<{ date: string, count: number}>\n * }>\n * @param languages Array<{name: string, displayed: bool}>\n *\n *\n * Return: Array<{\n *    count: number;\n *    date: string;\n *    website: string;\n * }>\n */\n\nexport const flattenWebsiteViews = createSelector([selectData, getSelectedLanguages], (data, languages) => {\n  return _.flatten(data.filter(website => website.tags.filter(tag => languages.map(lang => lang.name).includes(tag.name)).length > 0).map(website => website.website_views.map(views => {\n    return {\n      count: views.count,\n      date: views.date,\n      website: website.url\n    };\n  })));\n});","map":{"version":3,"sources":["/Users/jg443z/1234/src/selectors/chart.js"],"names":["createSelector","_","getSelectedLanguages","selectData","state","chart","data","groupByLanguage","languages","Object","entries","reduce","viewsByLanguages","website","language","tags","name","hasOwnProperty","numberOfViewsForThisWebsite","website_views","accumulator","currentValue","parseInt","count","map","languageData","formattedLanguageData","views","filter","some","flattenWebsiteViews","flatten","tag","lang","includes","length","date","url"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AACA,OAAOC,CAAP,MAAc,YAAd;AACA,SAASC,oBAAT,QAAqC,YAArC;;AAEA,MAAMC,UAAU,GAAGC,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYC,IAAxC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMC,eAAe,GAAGP,cAAc,CAC3C,CAACG,UAAD,EAAaD,oBAAb,CAD2C,EAE3C,CAACI,IAAD,EAAOE,SAAP,KAAqB;AAEnB,SAAOC,MAAM,CAACC,OAAP,CACLJ,IAAI,CACJ;AADI,GAEHK,MAFD,CAGE,UAASC,gBAAT,EAA2BC,OAA3B,EAAoC;AAClC;AACA,QAAIC,QAAQ,GAAGD,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgBC,IAA/B,CAFkC,CAGlC;AACA;AACA;AACA;;AACA,QAAI,CAACJ,gBAAgB,CAACK,cAAjB,CAAgCH,QAAhC,CAAL,EAAgD;AAC9CF,MAAAA,gBAAgB,CAACE,QAAD,CAAhB,GAA6B,CAA7B;AACD;;AACD,QAAII,2BAA2B,GAAGL,OAAO,CAACM,aAAR,CAC/BR,MAD+B,CAE9B,CAACS,WAAD,EAAcC,YAAd,KACED,WAAW,GAAGE,QAAQ,CAACD,YAAY,CAACE,KAAd,CAHM,EAI9B,CAJ8B,CAAlC;AAMAX,IAAAA,gBAAgB,CAACE,QAAD,CAAhB,IAA8BI,2BAA9B;AACA,WAAON,gBAAP;AACD,GArBH,EAsBE,EAtBF,CADK,EA0BL;AA1BK,GA2BJY,GA3BI,CA4BH,UAASC,YAAT,EAAuB;AAErB,QAAIC,qBAAqB,GAAG,EAA5B;AACA,WAAO;AAACZ,MAAAA,QAAQ,EAAEW,YAAY,CAAC,CAAD,CAAvB;AAA4BE,MAAAA,KAAK,EAAEF,YAAY,CAAC,CAAD;AAA/C,KAAP;AACD,GAhCE,EAkCL;AAlCK,GAmCJG,MAnCI,CAoCHH,YAAY,IACVjB,SAAS,CAACqB,IAAV,CACGf,QAAD,IACEA,QAAQ,CAACE,IAAT,KAAkBS,YAAY,CAACX,QAFnC,CArCC,CAAP;AA0CD,CA9C0C,CAAtC;AAiDP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMgB,mBAAmB,GAAG9B,cAAc,CAC/C,CAACG,UAAD,EAAaD,oBAAb,CAD+C,EAE/C,CAACI,IAAD,EAAOE,SAAP,KAAqB;AACnB,SAAOP,CAAC,CAAC8B,OAAF,CACLzB,IAAI,CACDsB,MADH,CAEIf,OAAO,IACLA,OAAO,CAACE,IAAR,CAAaa,MAAb,CAAoBI,GAAG,IACrBxB,SAAS,CAACgB,GAAV,CAAcS,IAAI,IAAIA,IAAI,CAACjB,IAA3B,EAAiCkB,QAAjC,CAA0CF,GAAG,CAAChB,IAA9C,CADF,EAEEmB,MAFF,GAEW,CALjB,EAOGX,GAPH,CAOOX,OAAO,IACVA,OAAO,CAACM,aAAR,CAAsBK,GAAtB,CAA0BG,KAAK,IAAI;AACjC,WAAO;AACLJ,MAAAA,KAAK,EAAEI,KAAK,CAACJ,KADR;AAELa,MAAAA,IAAI,EAAET,KAAK,CAACS,IAFP;AAGLvB,MAAAA,OAAO,EAAEA,OAAO,CAACwB;AAHZ,KAAP;AAKD,GAND,CARJ,CADK,CAAP;AAkBD,CArB8C,CAA1C","sourcesContent":["import { createSelector } from \"reselect\";\nimport _ from \"underscore\";\nimport { getSelectedLanguages } from \"./language\";\n\nconst selectData = state => state.chart.data;\n\n/**\n * Group total websites views by language.\n *\n * @param data Array<{\n *  tags: Array<{name: string}>;\n *  url: string;\n *  website_views: Array<{ date: string, count: string}>\n * }>\n * @param languages Array<{name: string, displayed: bool}>\n *\n * Return: { language: string, views: number }\n *\n *           if (website.tags.name === \"english\") {\n */\nexport const groupByLanguage = createSelector(\n  [selectData, getSelectedLanguages],\n  (data, languages) => {\n\n    return Object.entries(\n      data\n      // Returns language data aggregated in format [{English: 100},...]\n      .reduce(\n        function(viewsByLanguages, website) {\n          // TODO refactor so this function uses find and gets it in the right format initially\n          var language = website.tags[0].name\n          // viewsByLanguages.find(\n          //   (viewsbyLanguage) =>\n          //     viewsbyLanguage.language === language\n          // )\n          if (!viewsByLanguages.hasOwnProperty(language)) {\n            viewsByLanguages[language] = 0;\n          }\n          var numberOfViewsForThisWebsite = website.website_views\n            .reduce(\n              (accumulator, currentValue) =>\n                accumulator + parseInt(currentValue.count),\n              0\n            )\n          viewsByLanguages[language] += numberOfViewsForThisWebsite\n          return viewsByLanguages\n        },\n        {}\n      )\n    )\n      // reformats the values of the object to fit the expected return format\n      .map(\n        function(languageData) {\n\n          var formattedLanguageData = {}\n          return {language: languageData[0], views: languageData[1]}\n        }\n      )\n      // removes non-selected languages from output\n      .filter(\n        languageData =>\n          languages.some(\n            (language) =>\n              language.name === languageData.language\n          )\n      )\n  }\n);\n\n/**\n * Flattened list of daily views.\n *\n * @param data Array<{\n *  tags: <{name: string}>;\n *  url: string;\n *  website_views: Array<{ date: string, count: number}>\n * }>\n * @param languages Array<{name: string, displayed: bool}>\n *\n *\n * Return: Array<{\n *    count: number;\n *    date: string;\n *    website: string;\n * }>\n */\nexport const flattenWebsiteViews = createSelector(\n  [selectData, getSelectedLanguages],\n  (data, languages) => {\n    return _.flatten(\n      data\n        .filter(\n          website =>\n            website.tags.filter(tag =>\n              languages.map(lang => lang.name).includes(tag.name)\n            ).length > 0\n        )\n        .map(website =>\n          website.website_views.map(views => {\n            return {\n              count: views.count,\n              date: views.date,\n              website: website.url\n            };\n          })\n        )\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}