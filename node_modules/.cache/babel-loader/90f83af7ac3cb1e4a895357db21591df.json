{"ast":null,"code":"import { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for flatten transform nodes\n */\n\nexport class FoldTransformNode extends DataFlowNode {\n  constructor(parent, transform) {\n    var _a, _b, _c;\n\n    super(parent);\n    this.transform = transform;\n    this.transform = duplicate(transform); // duplicate to prevent side effects\n\n    const specifiedAs = (_a = this.transform.as) !== null && _a !== void 0 ? _a : [undefined, undefined];\n    this.transform.as = [(_b = specifiedAs[0]) !== null && _b !== void 0 ? _b : 'key', (_c = specifiedAs[1]) !== null && _c !== void 0 ? _c : 'value'];\n  }\n\n  clone() {\n    return new FoldTransformNode(null, duplicate(this.transform));\n  }\n\n  dependentFields() {\n    return new Set(this.transform.fold);\n  }\n\n  producedFields() {\n    return new Set(this.transform.as);\n  }\n\n  hash() {\n    return `FoldTransform ${hash(this.transform)}`;\n  }\n\n  assemble() {\n    const {\n      fold,\n      as\n    } = this.transform;\n    const result = {\n      type: 'fold',\n      fields: fold,\n      as\n    };\n    return result;\n  }\n\n}","map":{"version":3,"sources":["../../../../src/compile/data/fold.ts"],"names":[],"mappings":"AAEA,SAAQ,SAAR,EAAmB,IAAnB,QAA8B,YAA9B;AACA,SAAQ,YAAR,QAA2B,YAA3B;AAEA;;AAEG;;AACH,OAAM,MAAO,iBAAP,SAAiC,YAAjC,CAA6C;AAKjD,EAAA,WAAA,CAAY,MAAZ,EAA0C,SAA1C,EAAkE;;;AAChE,UAAM,MAAN;AADwC,SAAA,SAAA,GAAA,SAAA;AAExC,SAAK,SAAL,GAAiB,SAAS,CAAC,SAAD,CAA1B,CAFgE,CAEzB;;AACvC,UAAM,WAAW,GAAA,CAAA,EAAA,GAAG,KAAK,SAAL,CAAe,EAAlB,MAAoB,IAApB,IAAoB,EAAA,KAAA,KAAA,CAApB,GAAoB,EAApB,GAAwB,CAAC,SAAD,EAAY,SAAZ,CAAzC;AACA,SAAK,SAAL,CAAe,EAAf,GAAoB,CAAA,CAAA,EAAA,GAAC,WAAW,CAAC,CAAD,CAAZ,MAAe,IAAf,IAAe,EAAA,KAAA,KAAA,CAAf,GAAe,EAAf,GAAmB,KAAnB,EAAwB,CAAA,EAAA,GAAE,WAAW,CAAC,CAAD,CAAb,MAAgB,IAAhB,IAAgB,EAAA,KAAA,KAAA,CAAhB,GAAgB,EAAhB,GAAoB,OAA5C,CAApB;AACD;;AATM,EAAA,KAAK,GAAA;AACV,WAAO,IAAI,iBAAJ,CAAsB,IAAtB,EAA4B,SAAS,CAAC,KAAK,SAAN,CAArC,CAAP;AACD;;AASM,EAAA,eAAe,GAAA;AACpB,WAAO,IAAI,GAAJ,CAAQ,KAAK,SAAL,CAAe,IAAvB,CAAP;AACD;;AAEM,EAAA,cAAc,GAAA;AACnB,WAAO,IAAI,GAAJ,CAAQ,KAAK,SAAL,CAAe,EAAvB,CAAP;AACD;;AAEM,EAAA,IAAI,GAAA;AACT,WAAO,iBAAiB,IAAI,CAAC,KAAK,SAAN,CAAgB,EAA5C;AACD;;AAEM,EAAA,QAAQ,GAAA;AACb,UAAM;AAAC,MAAA,IAAD;AAAO,MAAA;AAAP,QAAa,KAAK,SAAxB;AACA,UAAM,MAAM,GAAoB;AAC9B,MAAA,IAAI,EAAE,MADwB;AAE9B,MAAA,MAAM,EAAE,IAFsB;AAG9B,MAAA;AAH8B,KAAhC;AAKA,WAAO,MAAP;AACD;;AAhCgD","sourceRoot":"","sourcesContent":["import { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for flatten transform nodes\n */\nexport class FoldTransformNode extends DataFlowNode {\n    constructor(parent, transform) {\n        var _a, _b, _c;\n        super(parent);\n        this.transform = transform;\n        this.transform = duplicate(transform); // duplicate to prevent side effects\n        const specifiedAs = (_a = this.transform.as) !== null && _a !== void 0 ? _a : [undefined, undefined];\n        this.transform.as = [(_b = specifiedAs[0]) !== null && _b !== void 0 ? _b : 'key', (_c = specifiedAs[1]) !== null && _c !== void 0 ? _c : 'value'];\n    }\n    clone() {\n        return new FoldTransformNode(null, duplicate(this.transform));\n    }\n    dependentFields() {\n        return new Set(this.transform.fold);\n    }\n    producedFields() {\n        return new Set(this.transform.as);\n    }\n    hash() {\n        return `FoldTransform ${hash(this.transform)}`;\n    }\n    assemble() {\n        const { fold, as } = this.transform;\n        const result = {\n            type: 'fold',\n            fields: fold,\n            as\n        };\n        return result;\n    }\n}\n//# sourceMappingURL=fold.js.map"]},"metadata":{},"sourceType":"module"}