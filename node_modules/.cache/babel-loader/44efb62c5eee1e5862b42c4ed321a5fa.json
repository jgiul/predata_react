{"ast":null,"code":"import { selector as parseSelector } from 'vega-event-selector';\nimport { array, isString } from 'vega-util';\nimport { forEachSelection, TUPLE } from '..';\nimport * as log from '../../../log';\nimport { isLegendBinding, isLegendStreamBinding, SELECTION_ID } from '../../../selection';\nimport { duplicate, varName } from '../../../util';\nimport { TUPLE_FIELDS } from './project';\nimport { TOGGLE } from './toggle';\nconst legendBindings = {\n  has: selCmpt => {\n    const spec = selCmpt.resolve === 'global' && selCmpt.bind && isLegendBinding(selCmpt.bind);\n    const projLen = selCmpt.project.items.length === 1 && selCmpt.project.items[0].field !== SELECTION_ID;\n\n    if (spec && !projLen) {\n      log.warn(log.message.LEGEND_BINDINGS_MUST_HAVE_PROJECTION);\n    }\n\n    return spec && projLen;\n  },\n  parse: (model, selCmpt, selDef, origDef) => {\n    var _a; // Binding a selection to a legend disables default direct manipulation interaction.\n    // A user can choose to re-enable it by explicitly specifying triggering input events.\n\n\n    if (!origDef.on) delete selCmpt.events;\n    if (!origDef.clear) delete selCmpt.clear;\n\n    if (origDef.on || origDef.clear) {\n      const legendFilter = 'event.item && indexof(event.item.mark.role, \"legend\") < 0';\n\n      for (const evt of selCmpt.events) {\n        evt.filter = array((_a = evt.filter) !== null && _a !== void 0 ? _a : []);\n\n        if (evt.filter.indexOf(legendFilter) < 0) {\n          evt.filter.push(legendFilter);\n        }\n      }\n    }\n\n    const evt = isLegendStreamBinding(selCmpt.bind) ? selCmpt.bind.legend : 'click';\n    const stream = isString(evt) ? parseSelector(evt, 'view') : array(evt);\n    selCmpt.bind = {\n      legend: {\n        merge: stream\n      }\n    };\n  },\n  topLevelSignals: (model, selCmpt, signals) => {\n    const selName = selCmpt.name;\n    const stream = isLegendStreamBinding(selCmpt.bind) && selCmpt.bind.legend;\n\n    const markName = name => s => {\n      const ds = duplicate(s);\n      ds.markname = name;\n      return ds;\n    };\n\n    for (const proj of selCmpt.project.items) {\n      if (!proj.hasLegend) continue;\n      const prefix = `${varName(proj.field)}_legend`;\n      const sgName = `${selName}_${prefix}`;\n      const hasSignal = signals.filter(s => s.name === sgName);\n\n      if (hasSignal.length === 0) {\n        const events = stream.merge.map(markName(`${prefix}_symbols`)).concat(stream.merge.map(markName(`${prefix}_labels`))).concat(stream.merge.map(markName(`${prefix}_entries`)));\n        signals.unshift(Object.assign(Object.assign({\n          name: sgName\n        }, !selCmpt.init ? {\n          value: null\n        } : {}), {\n          on: [// Legend entries do not store values, so we need to walk the scenegraph to the symbol datum.\n          {\n            events,\n            update: 'datum.value || item().items[0].items[0].datum.value',\n            force: true\n          }, {\n            events: stream.merge,\n            update: `!event.item || !datum ? null : ${sgName}`,\n            force: true\n          }]\n        }));\n      }\n    }\n\n    return signals;\n  },\n  signals: (model, selCmpt, signals) => {\n    const name = selCmpt.name;\n    const proj = selCmpt.project;\n    const tuple = signals.find(s => s.name === name + TUPLE);\n    const fields = name + TUPLE_FIELDS;\n    const values = proj.items.filter(p => p.hasLegend).map(p => varName(`${name}_${varName(p.field)}_legend`));\n    const valid = values.map(v => `${v} !== null`).join(' && ');\n    const update = `${valid} ? {fields: ${fields}, values: [${values.join(', ')}]} : null`;\n\n    if (selCmpt.events && values.length > 0) {\n      tuple.on.push({\n        events: values.map(signal => ({\n          signal\n        })),\n        update\n      });\n    } else if (values.length > 0) {\n      tuple.update = update;\n      delete tuple.value;\n      delete tuple.on;\n    }\n\n    const toggle = signals.find(s => s.name === name + TOGGLE);\n    const events = isLegendStreamBinding(selCmpt.bind) && selCmpt.bind.legend;\n\n    if (toggle) {\n      if (!selCmpt.events) toggle.on[0].events = events;else toggle.on.push(Object.assign(Object.assign({}, toggle.on[0]), {\n        events\n      }));\n    }\n\n    return signals;\n  }\n};\nexport default legendBindings;\nexport function parseInteractiveLegend(model, channel, legendCmpt) {\n  var _a;\n\n  const field = (_a = model.fieldDef(channel)) === null || _a === void 0 ? void 0 : _a.field;\n  forEachSelection(model, selCmpt => {\n    var _a, _b;\n\n    const proj = (_a = selCmpt.project.hasField[field]) !== null && _a !== void 0 ? _a : selCmpt.project.hasChannel[channel];\n\n    if (proj && legendBindings.has(selCmpt)) {\n      const legendSelections = (_b = legendCmpt.get('selections')) !== null && _b !== void 0 ? _b : [];\n      legendSelections.push(selCmpt.name);\n      legendCmpt.set('selections', legendSelections, false);\n      proj.hasLegend = true;\n    }\n  });\n}","map":{"version":3,"sources":["../../../../../src/compile/selection/transforms/legends.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { selector as parseSelector } from 'vega-event-selector';\nimport { array, isString } from 'vega-util';\nimport { forEachSelection, TUPLE } from '..';\nimport * as log from '../../../log';\nimport { isLegendBinding, isLegendStreamBinding, SELECTION_ID } from '../../../selection';\nimport { duplicate, varName } from '../../../util';\nimport { TUPLE_FIELDS } from './project';\nimport { TOGGLE } from './toggle';\nconst legendBindings = {\n    has: (selCmpt) => {\n        const spec = selCmpt.resolve === 'global' && selCmpt.bind && isLegendBinding(selCmpt.bind);\n        const projLen = selCmpt.project.items.length === 1 && selCmpt.project.items[0].field !== SELECTION_ID;\n        if (spec && !projLen) {\n            log.warn(log.message.LEGEND_BINDINGS_MUST_HAVE_PROJECTION);\n        }\n        return spec && projLen;\n    },\n    parse: (model, selCmpt, selDef, origDef) => {\n        var _a;\n        // Binding a selection to a legend disables default direct manipulation interaction.\n        // A user can choose to re-enable it by explicitly specifying triggering input events.\n        if (!origDef.on)\n            delete selCmpt.events;\n        if (!origDef.clear)\n            delete selCmpt.clear;\n        if (origDef.on || origDef.clear) {\n            const legendFilter = 'event.item && indexof(event.item.mark.role, \"legend\") < 0';\n            for (const evt of selCmpt.events) {\n                evt.filter = array((_a = evt.filter) !== null && _a !== void 0 ? _a : []);\n                if (evt.filter.indexOf(legendFilter) < 0) {\n                    evt.filter.push(legendFilter);\n                }\n            }\n        }\n        const evt = isLegendStreamBinding(selCmpt.bind) ? selCmpt.bind.legend : 'click';\n        const stream = isString(evt) ? parseSelector(evt, 'view') : array(evt);\n        selCmpt.bind = { legend: { merge: stream } };\n    },\n    topLevelSignals: (model, selCmpt, signals) => {\n        const selName = selCmpt.name;\n        const stream = isLegendStreamBinding(selCmpt.bind) && selCmpt.bind.legend;\n        const markName = (name) => (s) => {\n            const ds = duplicate(s);\n            ds.markname = name;\n            return ds;\n        };\n        for (const proj of selCmpt.project.items) {\n            if (!proj.hasLegend)\n                continue;\n            const prefix = `${varName(proj.field)}_legend`;\n            const sgName = `${selName}_${prefix}`;\n            const hasSignal = signals.filter(s => s.name === sgName);\n            if (hasSignal.length === 0) {\n                const events = stream.merge\n                    .map(markName(`${prefix}_symbols`))\n                    .concat(stream.merge.map(markName(`${prefix}_labels`)))\n                    .concat(stream.merge.map(markName(`${prefix}_entries`)));\n                signals.unshift(Object.assign(Object.assign({ name: sgName }, (!selCmpt.init ? { value: null } : {})), { on: [\n                        // Legend entries do not store values, so we need to walk the scenegraph to the symbol datum.\n                        { events, update: 'datum.value || item().items[0].items[0].datum.value', force: true },\n                        { events: stream.merge, update: `!event.item || !datum ? null : ${sgName}`, force: true }\n                    ] }));\n            }\n        }\n        return signals;\n    },\n    signals: (model, selCmpt, signals) => {\n        const name = selCmpt.name;\n        const proj = selCmpt.project;\n        const tuple = signals.find(s => s.name === name + TUPLE);\n        const fields = name + TUPLE_FIELDS;\n        const values = proj.items.filter(p => p.hasLegend).map(p => varName(`${name}_${varName(p.field)}_legend`));\n        const valid = values.map(v => `${v} !== null`).join(' && ');\n        const update = `${valid} ? {fields: ${fields}, values: [${values.join(', ')}]} : null`;\n        if (selCmpt.events && values.length > 0) {\n            tuple.on.push({\n                events: values.map(signal => ({ signal })),\n                update\n            });\n        }\n        else if (values.length > 0) {\n            tuple.update = update;\n            delete tuple.value;\n            delete tuple.on;\n        }\n        const toggle = signals.find(s => s.name === name + TOGGLE);\n        const events = isLegendStreamBinding(selCmpt.bind) && selCmpt.bind.legend;\n        if (toggle) {\n            if (!selCmpt.events)\n                toggle.on[0].events = events;\n            else\n                toggle.on.push(Object.assign(Object.assign({}, toggle.on[0]), { events }));\n        }\n        return signals;\n    }\n};\nexport default legendBindings;\nexport function parseInteractiveLegend(model, channel, legendCmpt) {\n    var _a;\n    const field = (_a = model.fieldDef(channel)) === null || _a === void 0 ? void 0 : _a.field;\n    forEachSelection(model, selCmpt => {\n        var _a, _b;\n        const proj = (_a = selCmpt.project.hasField[field]) !== null && _a !== void 0 ? _a : selCmpt.project.hasChannel[channel];\n        if (proj && legendBindings.has(selCmpt)) {\n            const legendSelections = (_b = legendCmpt.get('selections')) !== null && _b !== void 0 ? _b : [];\n            legendSelections.push(selCmpt.name);\n            legendCmpt.set('selections', legendSelections, false);\n            proj.hasLegend = true;\n        }\n    });\n}\n//# sourceMappingURL=legends.js.map"]},"metadata":{},"sourceType":"module"}