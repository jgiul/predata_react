{"ast":null,"code":"import { identity, toBoolean, toDate, toNumber, toString } from 'vega-util';\n\nconst isValid = _ => _ != null && _ === _;\n\nconst isBoolean = _ => _ === 'true' || _ === 'false' || _ === true || _ === false;\n\nconst isDate = _ => !Number.isNaN(Date.parse(_));\n\nconst isNumber = _ => !Number.isNaN(+_) && !(_ instanceof Date);\n\nconst isInteger = _ => isNumber(_) && Number.isInteger(+_);\n\nexport const typeParsers = {\n  boolean: toBoolean,\n  integer: toNumber,\n  number: toNumber,\n  date: toDate,\n  string: toString,\n  unknown: identity\n};\nconst typeTests = [isBoolean, isInteger, isNumber, isDate];\nconst typeList = ['boolean', 'integer', 'number', 'date'];\nexport function inferType(values, field) {\n  if (!values || !values.length) return 'unknown';\n  const n = values.length,\n        m = typeTests.length,\n        a = typeTests.map((_, i) => i + 1);\n\n  for (let i = 0, t = 0, j, value; i < n; ++i) {\n    value = field ? values[i][field] : values[i];\n\n    for (j = 0; j < m; ++j) {\n      if (a[j] && isValid(value) && !typeTests[j](value)) {\n        a[j] = 0;\n        ++t;\n        if (t === typeTests.length) return 'string';\n      }\n    }\n  }\n\n  return typeList[a.reduce((u, v) => u === 0 ? v : u, 0) - 1];\n}\nexport function inferTypes(data, fields) {\n  return fields.reduce((types, field) => {\n    types[field] = inferType(data, field);\n    return types;\n  }, {});\n}","map":{"version":3,"sources":["/Users/jg443z/1234/node_modules/vega-loader/src/type.js"],"names":["identity","toBoolean","toDate","toNumber","toString","isValid","_","isBoolean","isDate","Number","isNaN","Date","parse","isNumber","isInteger","typeParsers","boolean","integer","number","date","string","unknown","typeTests","typeList","inferType","values","field","length","n","m","a","map","i","t","j","value","reduce","u","v","inferTypes","data","fields","types"],"mappings":"AAAA,SAAQA,QAAR,EAAkBC,SAAlB,EAA6BC,MAA7B,EAAqCC,QAArC,EAA+CC,QAA/C,QAA8D,WAA9D;;AAEA,MAAMC,OAAO,GAAGC,CAAC,IAAIA,CAAC,IAAI,IAAL,IAAaA,CAAC,KAAKA,CAAxC;;AAEA,MAAMC,SAAS,GAAGD,CAAC,IAAIA,CAAC,KAAK,MAAN,IAClBA,CAAC,KAAK,OADY,IAElBA,CAAC,KAAK,IAFY,IAGlBA,CAAC,KAAK,KAHX;;AAKA,MAAME,MAAM,GAAGF,CAAC,IAAI,CAACG,MAAM,CAACC,KAAP,CAAaC,IAAI,CAACC,KAAL,CAAWN,CAAX,CAAb,CAArB;;AAEA,MAAMO,QAAQ,GAAGP,CAAC,IAAI,CAACG,MAAM,CAACC,KAAP,CAAa,CAACJ,CAAd,CAAD,IAAqB,EAAEA,CAAC,YAAYK,IAAf,CAA3C;;AAEA,MAAMG,SAAS,GAAGR,CAAC,IAAIO,QAAQ,CAACP,CAAD,CAAR,IAAeG,MAAM,CAACK,SAAP,CAAiB,CAACR,CAAlB,CAAtC;;AAEA,OAAO,MAAMS,WAAW,GAAG;AACzBC,EAAAA,OAAO,EAAEf,SADgB;AAEzBgB,EAAAA,OAAO,EAAEd,QAFgB;AAGzBe,EAAAA,MAAM,EAAGf,QAHgB;AAIzBgB,EAAAA,IAAI,EAAKjB,MAJgB;AAKzBkB,EAAAA,MAAM,EAAGhB,QALgB;AAMzBiB,EAAAA,OAAO,EAAErB;AANgB,CAApB;AASP,MAAMsB,SAAS,GAAG,CAChBf,SADgB,EAEhBO,SAFgB,EAGhBD,QAHgB,EAIhBL,MAJgB,CAAlB;AAOA,MAAMe,QAAQ,GAAG,CACf,SADe,EAEf,SAFe,EAGf,QAHe,EAIf,MAJe,CAAjB;AAOA,OAAO,SAASC,SAAT,CAAmBC,MAAnB,EAA2BC,KAA3B,EAAkC;AACvC,MAAI,CAACD,MAAD,IAAW,CAACA,MAAM,CAACE,MAAvB,EAA+B,OAAO,SAAP;AAE/B,QAAMC,CAAC,GAAGH,MAAM,CAACE,MAAjB;AAAA,QACME,CAAC,GAAGP,SAAS,CAACK,MADpB;AAAA,QAEMG,CAAC,GAAGR,SAAS,CAACS,GAAV,CAAc,CAACzB,CAAD,EAAI0B,CAAJ,KAAUA,CAAC,GAAG,CAA5B,CAFV;;AAIA,OAAK,IAAIA,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG,CAAf,EAAkBC,CAAlB,EAAqBC,KAA1B,EAAiCH,CAAC,GAAGJ,CAArC,EAAwC,EAAEI,CAA1C,EAA6C;AAC3CG,IAAAA,KAAK,GAAGT,KAAK,GAAGD,MAAM,CAACO,CAAD,CAAN,CAAUN,KAAV,CAAH,GAAsBD,MAAM,CAACO,CAAD,CAAzC;;AACA,SAAKE,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGL,CAAhB,EAAmB,EAAEK,CAArB,EAAwB;AACtB,UAAIJ,CAAC,CAACI,CAAD,CAAD,IAAQ7B,OAAO,CAAC8B,KAAD,CAAf,IAA0B,CAACb,SAAS,CAACY,CAAD,CAAT,CAAaC,KAAb,CAA/B,EAAoD;AAClDL,QAAAA,CAAC,CAACI,CAAD,CAAD,GAAO,CAAP;AACA,UAAED,CAAF;AACA,YAAIA,CAAC,KAAKX,SAAS,CAACK,MAApB,EAA4B,OAAO,QAAP;AAC7B;AACF;AACF;;AAED,SAAOJ,QAAQ,CACbO,CAAC,CAACM,MAAF,CAAS,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,KAAK,CAAN,GAAUC,CAAV,GAAcD,CAAjC,EAAoC,CAApC,IAAyC,CAD5B,CAAf;AAGD;AAED,OAAO,SAASE,UAAT,CAAoBC,IAApB,EAA0BC,MAA1B,EAAkC;AACvC,SAAOA,MAAM,CAACL,MAAP,CAAc,CAACM,KAAD,EAAQhB,KAAR,KAAkB;AACrCgB,IAAAA,KAAK,CAAChB,KAAD,CAAL,GAAeF,SAAS,CAACgB,IAAD,EAAOd,KAAP,CAAxB;AACA,WAAOgB,KAAP;AACD,GAHM,EAGJ,EAHI,CAAP;AAID","sourcesContent":["import {identity, toBoolean, toDate, toNumber, toString} from 'vega-util';\n\nconst isValid = _ => _ != null && _ === _;\n\nconst isBoolean = _ => _ === 'true'\n  || _ === 'false'\n  || _ === true\n  || _ === false;\n\nconst isDate = _ => !Number.isNaN(Date.parse(_));\n\nconst isNumber = _ => !Number.isNaN(+_) && !(_ instanceof Date);\n\nconst isInteger = _ => isNumber(_) && Number.isInteger(+_);\n\nexport const typeParsers = {\n  boolean: toBoolean,\n  integer: toNumber,\n  number:  toNumber,\n  date:    toDate,\n  string:  toString,\n  unknown: identity\n};\n\nconst typeTests = [\n  isBoolean,\n  isInteger,\n  isNumber,\n  isDate\n];\n\nconst typeList = [\n  'boolean',\n  'integer',\n  'number',\n  'date'\n];\n\nexport function inferType(values, field) {\n  if (!values || !values.length) return 'unknown';\n\n  const n = values.length,\n        m = typeTests.length,\n        a = typeTests.map((_, i) => i + 1);\n\n  for (let i = 0, t = 0, j, value; i < n; ++i) {\n    value = field ? values[i][field] : values[i];\n    for (j = 0; j < m; ++j) {\n      if (a[j] && isValid(value) && !typeTests[j](value)) {\n        a[j] = 0;\n        ++t;\n        if (t === typeTests.length) return 'string';\n      }\n    }\n  }\n\n  return typeList[\n    a.reduce((u, v) => u === 0 ? v : u, 0) - 1\n  ];\n}\n\nexport function inferTypes(data, fields) {\n  return fields.reduce((types, field) => {\n    types[field] = inferType(data, field);\n    return types;\n  }, {});\n}\n"]},"metadata":{},"sourceType":"module"}