{"ast":null,"code":"import { createSelector } from \"reselect\";\nimport _ from \"underscore\";\nimport { getSelectedLanguages } from \"./language\";\n\nconst selectData = state => state.chart.data;\n/**\n * Group total websites views by language.\n *\n * @param data Array<{\n *  tags: Array<{name: string}>;\n *  url: string;\n *  website_views: Array<{ date: string, count: string}>\n * }>\n * @param languages Array<{name: string, displayed: bool}>\n *\n * Return: { language: string, views: number }\n *\n *           if (website.tags.name === \"english\") {\n */\n\n\nexport const groupByLanguage = createSelector([selectData, getSelectedLanguages], (data, languages) => {\n  // TODO: Implement\n  console.log(data[0]);\n  console.log(languages);\n  var cow = data.reduce((accumulator, website) => website.website_views.reduce((accumulator, currentValue) => accumulator + parseInt(currentValue.count), 0), 0);\n  console.log(cow);\n  var size = data.reduce((accumulator, currentValue) => accumulator + currentValue.count, 69);\n  console.log(size);\n  return [{\n    language: 'howdy',\n    views: size\n  }, {\n    language: 'howdy1',\n    views: 1\n  }];\n});\n/**\n * Flattened list of daily views.\n *\n * @param data Array<{\n *  tags: <{name: string}>;\n *  url: string;\n *  website_views: Array<{ date: string, count: number}>\n * }>\n * @param languages Array<{name: string, displayed: bool}>\n *\n *\n * Return: Array<{\n *    count: number;\n *    date: string;\n *    website: string;\n * }>\n */\n\nexport const flattenWebsiteViews = createSelector([selectData, getSelectedLanguages], (data, languages) => {\n  return _.flatten(data.filter(website => website.tags.filter(tag => languages.map(lang => lang.name).includes(tag.name)).length > 0).map(website => website.website_views.map(views => {\n    return {\n      count: views.count,\n      date: views.date,\n      website: website.url\n    };\n  })));\n});","map":{"version":3,"sources":["/Users/jg443z/1234/src/selectors/chart.js"],"names":["createSelector","_","getSelectedLanguages","selectData","state","chart","data","groupByLanguage","languages","console","log","cow","reduce","accumulator","website","website_views","currentValue","parseInt","count","size","language","views","flattenWebsiteViews","flatten","filter","tags","tag","map","lang","name","includes","length","date","url"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AACA,OAAOC,CAAP,MAAc,YAAd;AACA,SAASC,oBAAT,QAAqC,YAArC;;AAEA,MAAMC,UAAU,GAAGC,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYC,IAAxC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMC,eAAe,GAAGP,cAAc,CAC3C,CAACG,UAAD,EAAaD,oBAAb,CAD2C,EAE3C,CAACI,IAAD,EAAOE,SAAP,KAAqB;AACnB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAAC,CAAD,CAAhB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AAEA,MAAIG,GAAG,GAAGL,IAAI,CACXM,MADO,CAEN,CAACC,WAAD,EAAcC,OAAd,KACIA,OAAO,CAACC,aAAR,CACGH,MADH,CAEI,CAACC,WAAD,EAAcG,YAAd,KACEH,WAAW,GAAGI,QAAQ,CAACD,YAAY,CAACE,KAAd,CAH5B,EAII,CAJJ,CAHE,EASN,CATM,CAAV;AAWAT,EAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACA,MAAIQ,IAAI,GAAGb,IAAI,CAACM,MAAL,CAAY,CAACC,WAAD,EAAcG,YAAd,KAA+BH,WAAW,GAAGG,YAAY,CAACE,KAAtE,EAA6E,EAA7E,CAAX;AACAT,EAAAA,OAAO,CAACC,GAAR,CAAYS,IAAZ;AACA,SAAO,CAAC;AAACC,IAAAA,QAAQ,EAAE,OAAX;AAAoBC,IAAAA,KAAK,EAACF;AAA1B,GAAD,EAAkC;AAACC,IAAAA,QAAQ,EAAE,QAAX;AAAqBC,IAAAA,KAAK,EAAE;AAA5B,GAAlC,CAAP;AACD,CAtB0C,CAAtC;AAyBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,mBAAmB,GAAGtB,cAAc,CAC/C,CAACG,UAAD,EAAaD,oBAAb,CAD+C,EAE/C,CAACI,IAAD,EAAOE,SAAP,KAAqB;AACnB,SAAOP,CAAC,CAACsB,OAAF,CACLjB,IAAI,CACDkB,MADH,CAEIV,OAAO,IACLA,OAAO,CAACW,IAAR,CAAaD,MAAb,CAAoBE,GAAG,IACrBlB,SAAS,CAACmB,GAAV,CAAcC,IAAI,IAAIA,IAAI,CAACC,IAA3B,EAAiCC,QAAjC,CAA0CJ,GAAG,CAACG,IAA9C,CADF,EAEEE,MAFF,GAEW,CALjB,EAOGJ,GAPH,CAOOb,OAAO,IACVA,OAAO,CAACC,aAAR,CAAsBY,GAAtB,CAA0BN,KAAK,IAAI;AACjC,WAAO;AACLH,MAAAA,KAAK,EAAEG,KAAK,CAACH,KADR;AAELc,MAAAA,IAAI,EAAEX,KAAK,CAACW,IAFP;AAGLlB,MAAAA,OAAO,EAAEA,OAAO,CAACmB;AAHZ,KAAP;AAKD,GAND,CARJ,CADK,CAAP;AAkBD,CArB8C,CAA1C","sourcesContent":["import { createSelector } from \"reselect\";\nimport _ from \"underscore\";\nimport { getSelectedLanguages } from \"./language\";\n\nconst selectData = state => state.chart.data;\n\n/**\n * Group total websites views by language.\n *\n * @param data Array<{\n *  tags: Array<{name: string}>;\n *  url: string;\n *  website_views: Array<{ date: string, count: string}>\n * }>\n * @param languages Array<{name: string, displayed: bool}>\n *\n * Return: { language: string, views: number }\n *\n *           if (website.tags.name === \"english\") {\n */\nexport const groupByLanguage = createSelector(\n  [selectData, getSelectedLanguages],\n  (data, languages) => {\n    // TODO: Implement\n    console.log(data[0])\n    console.log(languages)\n\n    var cow = data\n      .reduce(\n        (accumulator, website) =>\n            website.website_views\n              .reduce(\n                (accumulator, currentValue) =>\n                  accumulator + parseInt(currentValue.count),\n                0\n              ),\n        0\n      )\n    console.log(cow)\n    var size = data.reduce((accumulator, currentValue) => accumulator + currentValue.count, 69 )\n    console.log(size)\n    return [{language: 'howdy', views:size}, {language: 'howdy1', views: 1}];\n  }\n);\n\n/**\n * Flattened list of daily views.\n *\n * @param data Array<{\n *  tags: <{name: string}>;\n *  url: string;\n *  website_views: Array<{ date: string, count: number}>\n * }>\n * @param languages Array<{name: string, displayed: bool}>\n *\n *\n * Return: Array<{\n *    count: number;\n *    date: string;\n *    website: string;\n * }>\n */\nexport const flattenWebsiteViews = createSelector(\n  [selectData, getSelectedLanguages],\n  (data, languages) => {\n    return _.flatten(\n      data\n        .filter(\n          website =>\n            website.tags.filter(tag =>\n              languages.map(lang => lang.name).includes(tag.name)\n            ).length > 0\n        )\n        .map(website =>\n          website.website_views.map(views => {\n            return {\n              count: views.count,\n              date: views.date,\n              website: website.url\n            };\n          })\n        )\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}