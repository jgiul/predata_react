{"ast":null,"code":"import { createSelector } from \"reselect\";\nimport _ from \"underscore\";\nimport { getSelectedLanguages } from \"./language\";\n\nconst selectData = state => state.chart.data;\n/**\n * Group total websites views by language.\n *\n * @param data Array<{\n *  tags: Array<{name: string}>;\n *  url: string;\n *  website_views: Array<{ date: string, count: string}>\n * }>\n * @param languages Array<{name: string, displayed: bool}>\n *\n * Return: { language: string, views: number }\n *\n *           if (website.tags.name === \"english\") {\n */\n\n\nexport const groupByLanguage = createSelector([selectData, getSelectedLanguages], (data, languages) => {\n  // TODO: Implement\n  // console.log(data[0])\n  // console.log(languages)\n  var cow = data.reduce(function (accumulator, website) {\n    console.log(website);\n\n    if (!accumulator.hasOwnProperty(website.tags.name)) {\n      accumulator[website.tags.name] = [];\n    }\n\n    accumulator[website.tags.name] = website.website_views.reduce((accumulator, currentValue) => accumulator + parseInt(currentValue.count), 0);\n    return accumulator;\n  }, 0);\n  console.log(cow); // var size = data.reduce((accumulator, currentValue) => accumulator + currentValue.count, 69 )\n  // console.log(size)\n\n  return [{\n    language: 'howdy',\n    views: 0\n  }, {\n    language: 'howdy1',\n    views: 1\n  }];\n});\n/**\n * Flattened list of daily views.\n *\n * @param data Array<{\n *  tags: <{name: string}>;\n *  url: string;\n *  website_views: Array<{ date: string, count: number}>\n * }>\n * @param languages Array<{name: string, displayed: bool}>\n *\n *\n * Return: Array<{\n *    count: number;\n *    date: string;\n *    website: string;\n * }>\n */\n\nexport const flattenWebsiteViews = createSelector([selectData, getSelectedLanguages], (data, languages) => {\n  return _.flatten(data.filter(website => website.tags.filter(tag => languages.map(lang => lang.name).includes(tag.name)).length > 0).map(website => website.website_views.map(views => {\n    return {\n      count: views.count,\n      date: views.date,\n      website: website.url\n    };\n  })));\n});","map":{"version":3,"sources":["/Users/jg443z/1234/src/selectors/chart.js"],"names":["createSelector","_","getSelectedLanguages","selectData","state","chart","data","groupByLanguage","languages","cow","reduce","accumulator","website","console","log","hasOwnProperty","tags","name","website_views","currentValue","parseInt","count","language","views","flattenWebsiteViews","flatten","filter","tag","map","lang","includes","length","date","url"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AACA,OAAOC,CAAP,MAAc,YAAd;AACA,SAASC,oBAAT,QAAqC,YAArC;;AAEA,MAAMC,UAAU,GAAGC,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYC,IAAxC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMC,eAAe,GAAGP,cAAc,CAC3C,CAACG,UAAD,EAAaD,oBAAb,CAD2C,EAE3C,CAACI,IAAD,EAAOE,SAAP,KAAqB;AACnB;AACA;AACA;AAEA,MAAIC,GAAG,GACLH,IAAI,CACHI,MADD,CAEE,UAASC,WAAT,EAAsBC,OAAtB,EAA+B;AAC7BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;;AACA,QAAI,CAACD,WAAW,CAACI,cAAZ,CAA2BH,OAAO,CAACI,IAAR,CAAaC,IAAxC,CAAL,EAAoD;AAClDN,MAAAA,WAAW,CAACC,OAAO,CAACI,IAAR,CAAaC,IAAd,CAAX,GAAiC,EAAjC;AACD;;AACDN,IAAAA,WAAW,CAACC,OAAO,CAACI,IAAR,CAAaC,IAAd,CAAX,GAAiCL,OAAO,CAACM,aAAR,CAC9BR,MAD8B,CAE7B,CAACC,WAAD,EAAcQ,YAAd,KACER,WAAW,GAAGS,QAAQ,CAACD,YAAY,CAACE,KAAd,CAHK,EAI7B,CAJ6B,CAAjC;AAMA,WAAOV,WAAP;AACD,GAdH,EAeE,CAfF,CADF;AAkBAE,EAAAA,OAAO,CAACC,GAAR,CAAYL,GAAZ,EAvBmB,CAwBnB;AACA;;AACA,SAAO,CAAC;AAACa,IAAAA,QAAQ,EAAE,OAAX;AAAoBC,IAAAA,KAAK,EAAC;AAA1B,GAAD,EAA+B;AAACD,IAAAA,QAAQ,EAAE,QAAX;AAAqBC,IAAAA,KAAK,EAAE;AAA5B,GAA/B,CAAP;AACD,CA7B0C,CAAtC;AAgCP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,mBAAmB,GAAGxB,cAAc,CAC/C,CAACG,UAAD,EAAaD,oBAAb,CAD+C,EAE/C,CAACI,IAAD,EAAOE,SAAP,KAAqB;AACnB,SAAOP,CAAC,CAACwB,OAAF,CACLnB,IAAI,CACDoB,MADH,CAEId,OAAO,IACLA,OAAO,CAACI,IAAR,CAAaU,MAAb,CAAoBC,GAAG,IACrBnB,SAAS,CAACoB,GAAV,CAAcC,IAAI,IAAIA,IAAI,CAACZ,IAA3B,EAAiCa,QAAjC,CAA0CH,GAAG,CAACV,IAA9C,CADF,EAEEc,MAFF,GAEW,CALjB,EAOGH,GAPH,CAOOhB,OAAO,IACVA,OAAO,CAACM,aAAR,CAAsBU,GAAtB,CAA0BL,KAAK,IAAI;AACjC,WAAO;AACLF,MAAAA,KAAK,EAAEE,KAAK,CAACF,KADR;AAELW,MAAAA,IAAI,EAAET,KAAK,CAACS,IAFP;AAGLpB,MAAAA,OAAO,EAAEA,OAAO,CAACqB;AAHZ,KAAP;AAKD,GAND,CARJ,CADK,CAAP;AAkBD,CArB8C,CAA1C","sourcesContent":["import { createSelector } from \"reselect\";\nimport _ from \"underscore\";\nimport { getSelectedLanguages } from \"./language\";\n\nconst selectData = state => state.chart.data;\n\n/**\n * Group total websites views by language.\n *\n * @param data Array<{\n *  tags: Array<{name: string}>;\n *  url: string;\n *  website_views: Array<{ date: string, count: string}>\n * }>\n * @param languages Array<{name: string, displayed: bool}>\n *\n * Return: { language: string, views: number }\n *\n *           if (website.tags.name === \"english\") {\n */\nexport const groupByLanguage = createSelector(\n  [selectData, getSelectedLanguages],\n  (data, languages) => {\n    // TODO: Implement\n    // console.log(data[0])\n    // console.log(languages)\n\n    var cow =\n      data\n      .reduce(\n        function(accumulator, website) {\n          console.log(website)\n          if (!accumulator.hasOwnProperty(website.tags.name)) {\n            accumulator[website.tags.name] = [];\n          }\n          accumulator[website.tags.name] = website.website_views\n            .reduce(\n              (accumulator, currentValue) =>\n                accumulator + parseInt(currentValue.count),\n              0\n            )\n          return accumulator\n        },\n        0\n      )\n    console.log(cow)\n    // var size = data.reduce((accumulator, currentValue) => accumulator + currentValue.count, 69 )\n    // console.log(size)\n    return [{language: 'howdy', views:0}, {language: 'howdy1', views: 1}];\n  }\n);\n\n/**\n * Flattened list of daily views.\n *\n * @param data Array<{\n *  tags: <{name: string}>;\n *  url: string;\n *  website_views: Array<{ date: string, count: number}>\n * }>\n * @param languages Array<{name: string, displayed: bool}>\n *\n *\n * Return: Array<{\n *    count: number;\n *    date: string;\n *    website: string;\n * }>\n */\nexport const flattenWebsiteViews = createSelector(\n  [selectData, getSelectedLanguages],\n  (data, languages) => {\n    return _.flatten(\n      data\n        .filter(\n          website =>\n            website.tags.filter(tag =>\n              languages.map(lang => lang.name).includes(tag.name)\n            ).length > 0\n        )\n        .map(website =>\n          website.website_views.map(views => {\n            return {\n              count: views.count,\n              date: views.date,\n              website: website.url\n            };\n          })\n        )\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}