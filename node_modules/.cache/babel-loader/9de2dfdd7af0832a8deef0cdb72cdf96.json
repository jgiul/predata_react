{"ast":null,"code":"import { isBinned } from '../bin';\nimport { getMainRangeChannel, SECONDARY_RANGE_CHANNEL } from '../channel';\nimport { isDatumDef, isFieldDef } from '../channeldef';\nimport * as log from '../log';\nimport { isUnitSpec } from '../spec/unit';\nexport class RuleForRangedLineNormalizer {\n  constructor() {\n    this.name = 'RuleForRangedLine';\n  }\n\n  hasMatchingType(spec) {\n    if (isUnitSpec(spec)) {\n      const {\n        encoding,\n        mark\n      } = spec;\n\n      if (mark === 'line') {\n        for (const channel of SECONDARY_RANGE_CHANNEL) {\n          const mainChannel = getMainRangeChannel(channel);\n          const mainChannelDef = encoding[mainChannel];\n\n          if (encoding[channel]) {\n            if (isFieldDef(mainChannelDef) && !isBinned(mainChannelDef.bin) || isDatumDef(mainChannelDef)) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  run(spec, params, normalize) {\n    const {\n      encoding\n    } = spec;\n    log.warn(log.message.lineWithRange(!!encoding.x2, !!encoding.y2));\n    return normalize(Object.assign(Object.assign({}, spec), {\n      mark: 'rule'\n    }), params);\n  }\n\n}","map":{"version":3,"sources":["../../../src/normalize/ruleforrangedline.ts"],"names":[],"mappings":"AAAA,SAAQ,QAAR,QAAuB,QAAvB;AACA,SAAQ,mBAAR,EAA6B,uBAA7B,QAA2D,YAA3D;AACA,SAAe,UAAf,EAA2B,UAA3B,QAA4C,eAA5C;AAEA,OAAO,KAAK,GAAZ,MAAqB,QAArB;AAEA,SAAyB,UAAzB,QAA0C,cAA1C;AAaA,OAAM,MAAO,2BAAP,CAAkC;AAAxC,EAAA,WAAA,GAAA;AACS,SAAA,IAAA,GAAO,mBAAP;AAiCR;;AA/BQ,EAAA,eAAe,CAAC,IAAD,EAAsC;AAC1D,QAAI,UAAU,CAAC,IAAD,CAAd,EAAsB;AACpB,YAAM;AAAC,QAAA,QAAD;AAAW,QAAA;AAAX,UAAmB,IAAzB;;AACA,UAAI,IAAI,KAAK,MAAb,EAAqB;AACnB,aAAK,MAAM,OAAX,IAAsB,uBAAtB,EAA+C;AAC7C,gBAAM,WAAW,GAAG,mBAAmB,CAAC,OAAD,CAAvC;AACA,gBAAM,cAAc,GAAG,QAAQ,CAAC,WAAD,CAA/B;;AAEA,cAAI,QAAQ,CAAC,OAAD,CAAZ,EAAuB;AACrB,gBAAK,UAAU,CAAC,cAAD,CAAV,IAA8B,CAAC,QAAQ,CAAC,cAAc,CAAC,GAAhB,CAAxC,IAAiE,UAAU,CAAC,cAAD,CAA/E,EAAiG;AAC/F,qBAAO,IAAP;AACD;AACF;AACF;AACF;AACF;;AACD,WAAO,KAAP;AACD;;AAEM,EAAA,GAAG,CAAC,IAAD,EAAuB,MAAvB,EAAiD,SAAjD,EAAgF;AACxF,UAAM;AAAC,MAAA;AAAD,QAAa,IAAnB;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,GAAG,CAAC,OAAJ,CAAY,aAAZ,CAA0B,CAAC,CAAC,QAAQ,CAAC,EAArC,EAAyC,CAAC,CAAC,QAAQ,CAAC,EAApD,CAAT;AAEA,WAAO,SAAS,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAET,IAFS,CAAA,EAEL;AACP,MAAA,IAAI,EAAE;AADC,KAFK,CAAA,EAKd,MALc,CAAhB;AAOD;;AAjCqC","sourceRoot":"","sourcesContent":["import { isBinned } from '../bin';\nimport { getMainRangeChannel, SECONDARY_RANGE_CHANNEL } from '../channel';\nimport { isDatumDef, isFieldDef } from '../channeldef';\nimport * as log from '../log';\nimport { isUnitSpec } from '../spec/unit';\nexport class RuleForRangedLineNormalizer {\n    constructor() {\n        this.name = 'RuleForRangedLine';\n    }\n    hasMatchingType(spec) {\n        if (isUnitSpec(spec)) {\n            const { encoding, mark } = spec;\n            if (mark === 'line') {\n                for (const channel of SECONDARY_RANGE_CHANNEL) {\n                    const mainChannel = getMainRangeChannel(channel);\n                    const mainChannelDef = encoding[mainChannel];\n                    if (encoding[channel]) {\n                        if ((isFieldDef(mainChannelDef) && !isBinned(mainChannelDef.bin)) || isDatumDef(mainChannelDef)) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n    run(spec, params, normalize) {\n        const { encoding } = spec;\n        log.warn(log.message.lineWithRange(!!encoding.x2, !!encoding.y2));\n        return normalize(Object.assign(Object.assign({}, spec), { mark: 'rule' }), params);\n    }\n}\n//# sourceMappingURL=ruleforrangedline.js.map"]},"metadata":{},"sourceType":"module"}